# # Task 1

# class Polygon:

#     def __init__(self, no_of_sides):
#         self.n = no_of_sides
#         self.sides = [0 for i in range(no_of_sides)]

#     def inputSides(self):
#         self.sides = [float(input(f"Enter side {str(i+1)}:")) 
#                                              for i in range(self.n)]

#     def dispSides(self):
#         for i in range(self.n):
#             print(f"Side {i+1} is {self.sides[i]}")    

# class Rectangle(Polygon):

#     def __init__(self):
#         # Polygon.__init__(self,2) 
#         super().__init__(2) 

#     def findArea(self):
#         a, b = self.sides
#         area = a * b
#         print(f"The area of the Rectangle is {area}")

# t1 = Rectangle()

# t1.inputSides()
# t1.dispSides()
# t1.findArea()

# # Task 2

# class Human:

#     def __init__(self, name):
#         self.name = name

#     def greetings(self):
#         return(f"Hello, {self.name}!")
    
#     @classmethod
#     def define_species(cls, name):
#        return cls(f"Congrats, {(name)}, you're a Homosapiens!")
    
#     @staticmethod
#     def reminder():
#         return "Don't forget about it."
    
# person = Human(input("Enter your name: \n"))
# print(person.greetings())

# person2 = Human.define_species(input("Repeat please: \n"))
# print(person2.name)

# print(Human.reminder())

# Task 3

class Employee:
        '''Useful class for registry of employees'''
        count=0

        def __init__(self, name, salary):
            self.name=name
            self.salary=salary
            Employee.count+=1

        def displayCount(self):
            print("There are %d employees" % Employee.count)
            
        def displayDetails(self):
            print(f"Name: {self.name} \nSalary: {self.salary} \n-------------")

e1=Employee("Andrew", 25000)
e2=Employee("Nick", 20000)
e3=Employee("Edward", 30000)
e4=Employee("Alex", 25000)

e4.displayCount()

print("Details of all employee:")

e1.displayDetails()
e2.displayDetails()
e3.displayDetails()
e4.displayDetails()

print(f"Information about base classes: {Employee.__mro__}")

print("The class namespace:")
for name in Employee.__dict__:
    print(f"{name}")

print(f"The class name: {Employee.__class__.__name__}")

print (f"The module name in which class is defined: {Employee.__module__}")

print(f"The documentation bar: \n{Employee.__doc__}")